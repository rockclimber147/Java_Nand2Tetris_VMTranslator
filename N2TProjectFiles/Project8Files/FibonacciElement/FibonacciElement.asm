@256
D=A
@0
M=D
@1
MD=-1
@2
MD=D-1
@3
MD=D-1
@4
MD=D-1
@Sys.init$ret.0
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@5
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Sys.init
0;JMP
(Sys.init$ret.0)
// function Main.fibonacci 0
(Main.fibonacci)
@0
D=M
@1
M=D
// push argument 0
@0
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
// push constant 2
@2
D=A
@0
A=M
M=D
@0
M=M+1
// lt                     // checks if n<2
@0
AM=M-1
D=M
A=A-1
D=M-D
M=-1
@T0
D;JLT
@0
A=M-1
M=0
(T0)
// if-goto IF_TRUE
@0
AM=M-1
D=M
@IF_TRUE
D;JNE
// goto IF_FALSE
@IF_FALSE
0;JMP
// label IF_TRUE          // if n<2, return n
(IF_TRUE)
// push argument 0
@0
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
// return
@1
D=M
@13
M=D
@5
D=A
@13
D=M-D
A=D
D=M
@14
M=D
@0
AM=M-1
D=M
@2
A=M
M=D
@2
D=M+1
@0
M=D
@13
M=M-1
A=M
D=M
@4
M=D
@13
M=M-1
A=M
D=M
@3
M=D
@13
M=M-1
A=M
D=M
@2
M=D
@13
M=M-1
A=M
D=M
@1
M=D
@14
A=M
0;JMP
// label IF_FALSE         // if n>=2, returns fib(n-2)+fib(n-1)
(IF_FALSE)
// push argument 0
@0
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
// push constant 2
@2
D=A
@0
A=M
M=D
@0
M=M+1
// sub
@0
AM=M-1
D=M
A=A-1
M=M-D
// call Main.fibonacci 1  // computes fib(n-2)
@Main.fibonacci$ret.1
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci$ret.1)
// push argument 0
@0
D=A
@2
A=M
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
// push constant 1
@1
D=A
@0
A=M
M=D
@0
M=M+1
// sub
@0
AM=M-1
D=M
A=A-1
M=M-D
// call Main.fibonacci 1  // computes fib(n-1)
@Main.fibonacci$ret.2
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci$ret.2)
// add                    // returns fib(n-1) + fib(n-2)
@0
AM=M-1
D=M
A=A-1
M=M+D
// return
@1
D=M
@13
M=D
@5
D=A
@13
D=M-D
A=D
D=M
@14
M=D
@0
AM=M-1
D=M
@2
A=M
M=D
@2
D=M+1
@0
M=D
@13
M=M-1
A=M
D=M
@4
M=D
@13
M=M-1
A=M
D=M
@3
M=D
@13
M=M-1
A=M
D=M
@2
M=D
@13
M=M-1
A=M
D=M
@1
M=D
@14
A=M
0;JMP





// function Sys.init 0
(Sys.init)
@0
D=M
@1
M=D
// push constant 4
@4
D=A
@0
A=M
M=D
@0
M=M+1
// call Main.fibonacci 1   // computes the 4'th fibonacci element
@Main.fibonacci$ret.3
D=A
@0
A=M
M=D
@0
M=M+1
@1
D=M
@0
A=M
M=D
@0
M=M+1
@2
D=M
@0
A=M
M=D
@0
M=M+1
@3
D=M
@0
A=M
M=D
@0
M=M+1
@4
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=M
@2
M=D
@6
D=A
@2
M=M-D
@0
D=M
@1
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci$ret.3)
// label WHILE
(WHILE)
// goto WHILE              // loops infinitely
@WHILE
0;JMP





